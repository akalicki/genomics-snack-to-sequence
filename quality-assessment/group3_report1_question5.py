#!/usr/bin/env python
"""
Usage: (python) group3_report1_question5.py <FASTQ FILE>
Given a FASTQ file, computes the average base-calling quality
for all 2D reads, along with the standard deviation and median.

To produce the data for the report, run on the fastq files for
pass data, fail data, and the files generated by the script hours.sh
"""
from itertools import izip_longest
import sys
import re
import math


def grouper(iterable, n, fillvalue=None):
    """Collect data into fixed-length chunks or blocks.
    From 'recipes' page of python itertools documentation."""
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)


def ascii_to_quality(c, maxscore):
    return (maxscore-1)*1.0*(ord(c) - 33)/93 + 1


if __name__ == '__main__':
    total = 0
    count = 0
    all_values = []
    with open(sys.argv[1]) as f:
        for r in grouper(f, 4, ""):
            if re.search('twodirections', r[0]):
                qualscores = [ascii_to_quality(c, 30) for c in r[3].strip()]
                all_values.extend(qualscores)
                count += len(qualscores)
                total += math.fsum(qualscores)
    average = total / count
    print "Number of bases: %d" % count
    print "Average base-calling quality: %.3f" % average
    t = math.fsum([math.pow(q - average, 2) for q in all_values])
    sd = math.sqrt(t / (count - 1))
    print "Base-calling standard deviation: %.3f" % sd
    ordered = sorted(all_values)
    if count % 2 == 0:
        med = (ordered[(count - 1) / 2] + ordered[(count - 1) / 2 + 1]) / 2.0
    else:
        med = ordered[(count - 1) / 2]
    print "Median: %.3f" % med
